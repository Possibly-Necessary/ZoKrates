
// ZK Circuit for the statement: prover has knowledge of k s.t h = Hash(k), c = g^k mod p, and p = 5k^3 + 2k^2 + k + 3
// This proof compiles to a circuit with 1744 constraints
// To compute witness, type: 
// zokrates compute-witness -a 167 13432747890427498375149439507741491713221934456011451209707589675527438237343 18984888164746760677248854498399796129086997644530529352716064491891774749895 23343263 7
// Witness computed is [1]

// Proof size: 2 KB
// Proving key size: 674 KB
// Verification key size: 3 KB

import "/home/arthur-merlin/.zokrates/stdlib/utils/casts/u8_from_bits" as u8_from_bits;
import "/home/arthur-merlin/.zokrates/stdlib/utils/casts/u8_to_bits" as u8_to_bits;
import "/home/arthur-merlin/.zokrates/stdlib/utils/pack/bool/unpack" as unpack;
import "/home/arthur-merlin/.zokrates/stdlib/hashes/poseidon/poseidon" as poseidon;

const u32 FIELD_SIZE_IN_BITS = 254;

// Function takes in a private input 'k' (prover's secret), and public inputs of c, p and g (generator)

def main(private field k, public field h, public field c, public field p, public field g) -> bool { 

    // Unpacking k into bits 
    bool[FIELD_SIZE_IN_BITS] bits_of_k = unpack(k);

    // Compute the Poseidon hash of k
    field hash = poseidon([k]);
    assert(hash == h); // Assert that the computed hash matches the public hash

    // Initialize c for repeated squaring 
    // Variables are assigned a mutable type because by default, variables in ZoKrates are immutable
    field mut cmt = 1;
    field mut base = g; // Base is the publicly known generator

    // Exponentiation using the square and multiply method
    for u32 i in 0..FIELD_SIZE_IN_BITS {
        cmt = if bits_of_k[i] { cmt * base } else { cmt };
        base = base * base;
    }

    // Assert that the computed commitment matches the public one
    assert(cmt == c); 

    // Polynomial computation: 5k^3 + 2k^2 + k + 3
    field poly = 5 * k * k * k + 2 * k * k + k + 3;
    assert(poly == p);

    return true; 
}
